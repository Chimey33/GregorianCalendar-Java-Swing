/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment2;

import java.awt.Color;
import java.util.InputMismatchException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javafx.scene.layout.Border;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;

/**
 *
 * @author matthewbelgre
 */
public class CalendarPrint extends javax.swing.JFrame {

    /**
     * Creates new form CalendarPrint
     */
    public CalendarPrint() {
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        mainContainer = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dateInfo = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        apr = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        feb = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        mar = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        may = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        jan = new javax.swing.JTextPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        jun = new javax.swing.JTextPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        jul = new javax.swing.JTextPane();
        jScrollPane9 = new javax.swing.JScrollPane();
        aug = new javax.swing.JTextPane();
        jScrollPane10 = new javax.swing.JScrollPane();
        sep = new javax.swing.JTextPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        oct = new javax.swing.JTextPane();
        jScrollPane12 = new javax.swing.JScrollPane();
        nov = new javax.swing.JTextPane();
        jScrollPane13 = new javax.swing.JScrollPane();
        dec = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        year = new javax.swing.JTextField();
        month = new javax.swing.JTextField();
        day = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        print = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout());

        dateInfo.setEditable(false);
        jScrollPane2.setViewportView(dateInfo);

        apr.setEditable(false);
        jScrollPane1.setViewportView(apr);

        feb.setEditable(false);
        jScrollPane3.setViewportView(feb);

        mar.setEditable(false);
        jScrollPane4.setViewportView(mar);

        may.setEditable(false);
        jScrollPane5.setViewportView(may);

        jan.setEditable(false);
        jScrollPane6.setViewportView(jan);

        jun.setEditable(false);
        jScrollPane7.setViewportView(jun);

        jul.setEditable(false);
        jScrollPane8.setViewportView(jul);

        jScrollPane9.setViewportView(aug);

        sep.setEditable(false);
        jScrollPane10.setViewportView(sep);

        oct.setEditable(false);
        jScrollPane11.setViewportView(oct);

        nov.setEditable(false);
        jScrollPane12.setViewportView(nov);

        dec.setEditable(false);
        jScrollPane13.setViewportView(dec);

        javax.swing.GroupLayout mainContainerLayout = new javax.swing.GroupLayout(mainContainer);
        mainContainer.setLayout(mainContainerLayout);
        mainContainerLayout.setHorizontalGroup(
            mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainContainerLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainContainerLayout.createSequentialGroup()
                        .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane10))
                        .addGap(43, 43, 43)
                        .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(43, 43, 43)
                        .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainContainerLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainContainerLayout.createSequentialGroup()
                        .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane13))
                .addContainerGap())
        );
        mainContainerLayout.setVerticalGroup(
            mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainContainerLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(3795, Short.MAX_VALUE))
        );

        day.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayActionPerformed(evt);
            }
        });

        jLabel2.setText("Day");

        jLabel3.setText("Month");

        jLabel4.setText("Year");

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        print.setText("Print Year");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter date to be checked:");

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(72, 72, 72))
                        .addGroup(searchPanelLayout.createSequentialGroup()
                            .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(searchPanelLayout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(jLabel2)))
                            .addGap(26, 26, 26)
                            .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(searchPanelLayout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(jLabel3)))
                            .addGap(18, 18, 18)
                            .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(searchPanelLayout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(jLabel4))
                                .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                        .addComponent(print)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clear)
                        .addGap(18, 18, 18)))
                .addContainerGap(507, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clear)
                    .addComponent(print))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1384, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        searchPanel.setBounds(1145, 50, 200, 100);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(611, 611, 611)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(427, 427, 427)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(2667, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(227, 227, 227))
        );

        mainContainer.setVisible(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayActionPerformed

    }//GEN-LAST:event_dayActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed

        int d, m, y;
        String sd = day.getText().trim();
        String sm = month.getText().trim();
        String sy = year.getText().trim();
        try {
            d = Integer.parseInt(sd);
            m = Integer.parseInt(sm);
            y = Integer.parseInt(sy);

            MyDate date = new MyDate(d, m, y);
            MyCalendar cal = new MyCalendar(date);
            if (d < 1) {
                JOptionPane.showMessageDialog(null, "Day must be a positive integer");
                throw new Exception();
            }
            if (d > cal.findDaysInMonth(m)) {
                switch (m) {
                    case 1:
                        JOptionPane.showMessageDialog(null, "January only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                    case 2:
                        JOptionPane.showMessageDialog(null, "February only has " + cal.findDaysInMonth(m) + " days in " + y);
                        throw new Exception();
                    case 3:
                        JOptionPane.showMessageDialog(null, "March only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                    case 4:
                        JOptionPane.showMessageDialog(null, "April only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                    case 5:
                        JOptionPane.showMessageDialog(null, "May only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                    case 6:
                        JOptionPane.showMessageDialog(null, "June only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                    case 7:
                        JOptionPane.showMessageDialog(null, "July only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                    case 8:
                        JOptionPane.showMessageDialog(null, "August only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                    case 9:
                        JOptionPane.showMessageDialog(null, "September only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                    case 10:
                        JOptionPane.showMessageDialog(null, "October only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                    case 11:
                        JOptionPane.showMessageDialog(null, "November only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                    case 12:
                        JOptionPane.showMessageDialog(null, "December only has " + cal.findDaysInMonth(m) + " days");
                        throw new Exception();
                }
            }
            if (m > 12 || m < 1) {
                JOptionPane.showMessageDialog(null, "Enter a month between 1 and 12");
                throw new Exception();
            }
            if (y < 1582) {
                JOptionPane.showMessageDialog(null, "Gregorian calendar started in 1582 \n"
                        + " Please enter a date after this year");
                throw new Exception();
            }

            dateInfo.setText(cal.printDateInfo());

            MyDate january = new MyDate(1, 1, y);
            MyCalendar JanCal = new MyCalendar(january);
            MyDate february = new MyDate(1, 2, y);
            MyCalendar FebCal = new MyCalendar(february);
            MyDate march = new MyDate(1, 3, y);
            MyCalendar MarCal = new MyCalendar(march);
            MyDate april = new MyDate(1, 4, y);
            MyCalendar AprCal = new MyCalendar(april);
            MyDate may1 = new MyDate(1, 5, y);
            MyCalendar MayCal = new MyCalendar(may1);
            MyDate june = new MyDate(1, 6, y);
            MyCalendar JunCal = new MyCalendar(june);

            MyDate july = new MyDate(1, 7, y);
            MyCalendar JulCal = new MyCalendar(july);

            MyDate august = new MyDate(1, 8, y);
            MyCalendar AugCal = new MyCalendar(august);

            MyDate september = new MyDate(1, 9, y);
            MyCalendar SepCal = new MyCalendar(september);

            MyDate october = new MyDate(1, 10, y);
            MyCalendar OctCal = new MyCalendar(october);

            MyDate november = new MyDate(1, 11, y);
            MyCalendar NovCal = new MyCalendar(november);

            MyDate december = new MyDate(1, 12, y);
            MyCalendar DecCal = new MyCalendar(december);

            jan.setText(JanCal.printCalendar("January"));

//            cal.highLightDate(jan, sy);
//
//            String charsToHighlight = Integer.toString(d);
//            Pattern pattern = Pattern.compile(charsToHighlight);
//            Matcher matcher = pattern.matcher(jan.getText());
            // Check all occurrences
//            while (matcher.find()) {
//                int startChar = matcher.start();
//                int endChar = matcher.end();
//
//                Highlighter h = jan.getHighlighter();
//                h.removeAllHighlights();
//
//                try {
//                    h.addHighlight(startChar, endChar + 2, DefaultHighlighter.DefaultPainter);
//                    break;
//                } catch (Exception ble) {
//                }

                //Highlight evry occurence
//        Highlighter h = jan.getHighlighter();
//        h.removeAllHighlights();
//        String text = jan.getText();
//        for (int i = 0; i < text.length(); i += 1) {
//        char ch = text.charAt(i);
//        if (charsToHighlight.indexOf(ch) >= 0)
//        try {
//          h.addHighlight(i, i + 5, DefaultHighlighter.DefaultPainter);
//          break;
//        } catch (Exception ble) {
//        }
            

            feb.setText(FebCal.printCalendar("February"));
            mar.setText(MarCal.printCalendar("March"));
            apr.setText(AprCal.printCalendar("April"));
            may.setText(MayCal.printCalendar("May"));
            jun.setText(JunCal.printCalendar("June"));
            jul.setText(JulCal.printCalendar("July"));
            aug.setText(AugCal.printCalendar("August"));
            sep.setText(SepCal.printCalendar("September"));
            oct.setText(OctCal.printCalendar("October"));
            nov.setText(NovCal.printCalendar("November"));
            dec.setText(DecCal.printCalendar("December"));
            switch (m) {
                case 1:
                    cal.highLightDate(jan, day.getText());
                    break;
                case 2:
                    cal.highLightDate(feb, day.getText());
                    break;
                case 3:
                    cal.highLightDate(mar, day.getText());
                    break;
                case 4:
                    cal.highLightDate(apr, day.getText());
                    break;
                case 5:
                    cal.highLightDate(may, day.getText());
                    break;
                case 6:
                    cal.highLightDate(jun, day.getText());
                    break;
                case 7:
                    cal.highLightDate(jul, day.getText());
                    break;
                case 8:
                    cal.highLightDate(aug, day.getText());
                    break;
                case 9:
                    cal.highLightDate(sep, day.getText());
                    break;
                case 10:
                    cal.highLightDate(oct, day.getText());
                    break;
                case 11:
                    cal.highLightDate(nov, day.getText());
                    break;
                case 12:
                    cal.highLightDate(dec, day.getText());
                    break;
            }
            mainContainer.setVisible(true);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Incorrect Input, Date must only contain integers \n"
                    + "             Please enter a valid date!");

        } catch (Exception ex) {
        }


    }//GEN-LAST:event_printActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        day.setText("");
        month.setText("");
        year.setText("");
        mainContainer.setVisible(false);
    }//GEN-LAST:event_clearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalendarPrint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalendarPrint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalendarPrint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalendarPrint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalendarPrint().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane apr;
    private javax.swing.JTextPane aug;
    private javax.swing.JButton clear;
    private javax.swing.JTextPane dateInfo;
    private javax.swing.JTextField day;
    private javax.swing.JTextPane dec;
    private javax.swing.JTextPane feb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextPane jan;
    private javax.swing.JTextPane jul;
    private javax.swing.JTextPane jun;
    private javax.swing.JPanel mainContainer;
    private javax.swing.JTextPane mar;
    private javax.swing.JTextPane may;
    private javax.swing.JTextField month;
    private javax.swing.JTextPane nov;
    private javax.swing.JTextPane oct;
    private javax.swing.JButton print;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextPane sep;
    private javax.swing.JTextField year;
    // End of variables declaration//GEN-END:variables
}
